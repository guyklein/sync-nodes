#!/usr/bin/env node
const path = require('path');

/**
 * Module dependencies.
 */

const app = require('../api/app');
const internalApp = require('../api/internalApp');
const http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = val => {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
};

/**
 * Event listener for HTTP server "error" event.
 */

const onError = error => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
};

const onErrorInternal = error => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof internalPort === 'string' ? 'Pipe ' + internalPort : 'Port ' + internalPort;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
    const addr = server.address();
    const bind =
        typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log(`Listening on ${bind}`);
};

const onListeningInternal = () => {
    const addr = internalServer.address();
    const bind =
        typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    console.log(`Listening on ${bind}`);
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
const internalPort = normalizePort(process.env.INTERNAL_PORT || '4000');

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const internalServer = http.createServer(internalApp);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

internalServer.listen(internalPort);
internalServer.on('error', onErrorInternal);
internalServer.on('listening', onListeningInternal);
